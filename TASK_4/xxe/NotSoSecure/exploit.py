import base64
import hashlib

# curve parameters of P-256 (see: https://ldapwiki.com/wiki/P-256)
n = 115792089210356248762697446949407573529996955224135760342422259061068512044369
L_n = len(bin(n)[2:])

def parse_signature(token):
	t = token.split(".")

	sig = base64.urlsafe_b64decode(t[2]+"===")
	m = t[0]+"."+t[1]

	e = hashlib.sha256(m.encode()).digest()

	z = int(bin(int(e.hex(),16))[2:L_n+2],2)

	r = int(sig[:-32].hex(),16) # start of the signature is r, which is defined as the x-component of the point k*G on the curve
	s = int(sig[-32:].hex(),16) # the last 32 bytes of the signature is the s value
	return r,s,z

# two tokes generated for the usernames "admim" and "admio" respectively
token1 = "eyJhbGciOiJFUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6IjEiLCJxdWlyayI6ImNpdmlsaWFuIn0.B5Tj6WgyWib7Qz0g4wXSS2pQMuh_sKvANfK4pEjJq_LF8MJxQOIg8yT0u6PIMqlu8xMkcDKe7Pxaw-sZZnWiuw"
token2 = "eyJhbGciOiJFUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6IjIiLCJxdWlyayI6ImNpdmlsaWFuIn0.B5Tj6WgyWib7Qz0g4wXSS2pQMuh_sKvANfK4pEjJq_J7-H70p88JqYoeOuJo9ggh-2NJ8reTYIz2vfiT-eg1Ng"

# calculate the signature parameters from the tokens
r1, s1, z1 = parse_signature(token1)
r2, s2, z2 = parse_signature(token2)

assert r1==r2 # checks if the r-values match for the two signatures, if they do (spoiler alert: they do), then the same k-value is used and a signature can be forged

# recover the private key d from the two signatures using modular arithmetic (read the wikipedia article)
k = ((z1-z2)*pow((s1-s2)%n,-1,n))%n # k = (z-z')/(s-s') (mod n)
d = ((s1*k-z1)*pow(r1,-1,n))%n

# header and payload of the JWT
admin_token = b"eyJhbGciOiJFUzI1NiIsInR5cCI6IkpXVCJ9." + base64.urlsafe_b64encode(b'{"username":"dngvng","quirk":"HACKING"}')
admin_token = admin_token.replace(b"=",b"")

# calculate the signature using the recovered private key (again, read the wikipedia article)
e = hashlib.sha256(admin_token).digest() # e = HASH(m)
z = int(bin(int(e.hex(),16))[2:L_n+2],2) # z = e[:L_n] (in bits)
r = r1
s = (pow(k,-1,n)*(z+r*d))%n # s = (z+rd)/k (mod n)

# putting r and s together and encoding
signature = bytes.fromhex(hex(r)[2:].zfill(64)) + bytes.fromhex(hex(s)[2:].zfill(64))
admin_token += b"." + base64.urlsafe_b64encode(signature)

# print forged token
print(admin_token.decode()[:-2])